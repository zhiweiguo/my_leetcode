# 每日打卡 day 2 : 17.16

'''
按摩师

一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。
在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。
给定一个预约请求序列，替按摩师找到最优的预约集合（总预约时间最长），返回总的分钟数。

示例：
输入： [2,1,4,5,3,1,1,3]
输出： 12
解释： 选择 1 号预约、 3 号预约、 5 号预约和 8 号预约，总时长 = 2 + 4 + 3 + 3 = 12。


'''

class Solution:
    def massage(self, nums: List[int]) -> int:
        '''
        动态规划：
        每个预约需要可以考虑接或不接，
        若接，则上一个预约必须不能接；
        若不接，则上一个预约接或不接都可以，选最大值即可
        '''
        l = len(nums)
        if not l:
            return 0
        dp0 = 0 # 不接
        dp1 = nums[0] # 接
        for i in range(1, l):
            dp0, dp1 = max(dp0, dp1), dp0 + nums[i]

        return max(dp0, dp1)